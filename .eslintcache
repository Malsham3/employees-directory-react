[{"/Users/malshammary/code/homework/employees-directory-react/src/index.js":"1","/Users/malshammary/code/homework/employees-directory-react/src/App.js":"2","/Users/malshammary/code/homework/employees-directory-react/src/components/Container.js":"3","/Users/malshammary/code/homework/employees-directory-react/src/components/List.js":"4","/Users/malshammary/code/homework/employees-directory-react/src/components/Header/Header.js":"5","/Users/malshammary/code/homework/employees-directory-react/src/components/Content/EmployeeCard.js":"6","/Users/malshammary/code/homework/employees-directory-react/src/pages/Home.js":"7"},{"size":216,"mtime":1619126777727,"results":"8","hashOfConfig":"9"},{"size":150,"mtime":1619675798634,"results":"10","hashOfConfig":"9"},{"size":186,"mtime":1610604574788,"results":"11","hashOfConfig":"9"},{"size":1004,"mtime":1610866091208,"results":"12","hashOfConfig":"9"},{"size":821,"mtime":1619675670808,"results":"13","hashOfConfig":"9"},{"size":1267,"mtime":1619644435410,"results":"14","hashOfConfig":"9"},{"size":1539,"mtime":1619675563954,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1lzsvvf",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/malshammary/code/homework/employees-directory-react/src/index.js",[],["35","36"],"/Users/malshammary/code/homework/employees-directory-react/src/App.js",[],"/Users/malshammary/code/homework/employees-directory-react/src/components/Container.js",[],["37","38"],"/Users/malshammary/code/homework/employees-directory-react/src/components/List.js",["39","40"],"import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nfunction List({ list, sortbyName }) {\n  return (\n    <Table striped bordered hover>\n      \n      <thead className = \"text-center\">\n        <tr>\n          <th>Photo</th>\n          <th>\n            <a onClick={sortbyName}>Full Name</a>\n          </th>\n          <th>Email</th>\n          <th>Phone</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {list.map(({ picture, name, email, phone, id }) => (\n          <tr key={id.value} className = \"text-center\">\n            <td>\n              <img\n                src={picture.large}\n                alt= \"profile picture\"\n              />\n            </td>\n            <td>\n              {name.first} {name.last}\n            </td>\n            <td>\n              <a href={\"mailto:\" + email} target=\"__blank\">\n                {email}\n              </a>\n            </td>\n            <td>{phone}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default List;\n",["41","42"],"/Users/malshammary/code/homework/employees-directory-react/src/components/Header/Header.js",[],"/Users/malshammary/code/homework/employees-directory-react/src/components/Content/EmployeeCard.js",["43"],"import React from \"react\";\nimport { FaPhone, FaEnvelope, FaHome } from \"react-icons/fa\";\nimport { Card, Button } from \"react-bootstrap\";\n\nfunction EmployeeCard({ list, sortbyName }) {\n  return (\n    <>\n      {list.map(({ picture, name, email, phone, location, id }) => (\n        <Card id=\"employee-card\" bg=\"light\" style={{ width: '18rem' }}>\n          <Card.Img\n            id=\"card-image\"\n            className=\"rounded-circle\"\n            variant=\"top\"\n            src={picture.large}\n            r\n          />\n          <Card.Body id=\"card-body\">\n            <Card.Title id=\"card-title\">\n              {name.first} {name.last}\n            </Card.Title>\n            <Card.Subtitle id=\"card-subtitle\" className=\"mb-2 text-muted\">\n              Software Engineer\n            </Card.Subtitle>\n            <br />\n            <Card.Text>\n              <FaPhone id=\"icon\" /> {phone}\n              <br />\n              <FaEnvelope id=\"icon\" /> {email}\n              <br />\n              <FaHome id=\"icon\" /> {location.city}, {location.state}\n            </Card.Text>\n            {/* <Button href={\"mailto:\"+email} id=\"random-btn\" variant=\"primary\">Send an e-mail</Button> */}\n          </Card.Body>\n        </Card>\n      ))}\n    </>\n  );\n}\n\nexport default EmployeeCard;\n","/Users/malshammary/code/homework/employees-directory-react/src/pages/Home.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"44","replacedBy":"48"},{"ruleId":"46","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":12,"column":13,"nodeType":"52","endLine":12,"endColumn":37},{"ruleId":"53","severity":1,"message":"54","line":23,"column":15,"nodeType":"52","endLine":26,"endColumn":17},{"ruleId":"44","replacedBy":"55"},{"ruleId":"46","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":3,"column":16,"nodeType":"59","messageId":"60","endLine":3,"endColumn":22},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],["61"],["62"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["61"],["62"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]